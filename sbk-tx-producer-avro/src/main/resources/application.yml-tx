# Use this for a transactional Kafka producer with Avro serialization
spring:
  application:
    name: sbk-tx-producer

  datasource:
    url: jdbc:mysql://localhost:3306/births
    username: births
    password: births
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      idle-timeout: 30000
      pool-name: HikariCP
      max-lifetime: 1800000
      connection-timeout: 30000
      auto-commit: false
      transaction-isolation: TRANSACTION_READ_COMMITTED

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
    open-in-view: false

  kafka:
    bootstrap-servers: localhost:9092
    topic: birth.register
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      transaction-id-prefix: tx-birth-producer-
      properties:
        enable.idempotence: true
        acks: all
        schema.registry.url: http://localhost:8081

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,beans
  endpoint:
    health:
      show-details: always

logging:
  level:
    root: INFO
    foo.kafka.tx.producer: DEBUG
    org.springframework.transaction: TRACE
    org.springframework.kafka.transaction: DEBUG